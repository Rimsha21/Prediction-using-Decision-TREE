# -*- coding: utf-8 -*-
"""TASK 4 GRIP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EB4F9k4A4RLTTAZZ67Uohg6Qp2UOrud9

## Author-  Rimsha Virmani
## GRIP @ The Sparks Foundation
## Task 4: Prediction Using Decision Tree Algorithm
## Problem statement: Create the Decision Tree classifier and visualize it graphically.
## The purpose is if we feed any new data to this classifier, it would be able to predict the right class accordingly.
## Dataset : https://bit.ly/3kXTdox
"""

# Importing required libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split

#Importing libraries for visualization
from sklearn.externals.six import StringIO
from IPython.display import Image
from sklearn.tree import export_graphviz
import pydotplus

from google.colab import files

uploaded= files.upload()

import io
df = pd.read_csv(io.StringIO(uploaded['Iris.csv'].decode('utf-8')))

df.head()

# shape of data
df.shape

# checking for null values
df.isnull().sum()

df.describe()

#overall information of dataset
df.info()

#Splitting the dataset into train and test with ratio 70:30
inputs = df[['SepalLengthCm','SepalWidthCm','PetalLengthCm','PetalWidthCm']].values
classes = df['Species'].values
(train_inputs, test_inputs, train_classes, test_classes)= train_test_split(inputs, classes, train_size=0.7, random_state=1)

train_inputs.shape

test_inputs.shape

train_classes.shape

test_classes.shape

# Building decision tree classifier
model = DecisionTreeClassifier()
model.fit(train_inputs, train_classes)

model.score(test_inputs, test_classes)

!apt-get install graphviz -y

#Graph Visualization
dot_data= StringIO()
export_graphviz(model, out_file= dot_data, feature_names=['SepalLengthCm','SepalWidthCm','PetalLengthCm','PetalWidthCm'], filled=True, rounded= True, special_characters=True)
graph = pydotplus.graph_from_dot_data(dot_data.getvalue())
Image(graph.create_png())

